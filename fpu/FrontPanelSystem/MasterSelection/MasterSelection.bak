#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <unistd.h>
#include <fcntl.h>
#include <signal.h>
#include <errno.h>
#include <string.h>
#include <ctype.h>

#include <tui.h>
#include <front_panel.h>

#define MAX_SCREENS 2

static int msi;				// globaled for signal handler
static int default_screen = MS_DEV;	// temporary storage for default screen

extern void tohex( char * );
extern void tohexn( char *, int );
extern int xprintf( int fd, const char * fmt, ... );

void window_handler( int arg )
{
	fprintf( stderr, "SIGWINCH\n" );
}


void alldone( int arg )
{
	fprintf( stderr, "Exiting on HUP\n");
	close( msi );
	exit( 0 );
}


static char * regtab[APP_OPENS];
static char screen[2][8][40];
static char pad[16];

int xprintat( int fd, int r, int c, const char *fmt, ... )
{
	int       n;
	va_list   ap;

	// set the cursors position
	n = xprintf( fd, "[%d;%df", r, c );
	if( n > 0 ) {
		// issue a normal write
		va_start( ap, fmt );
		n = xprintf( fd, fmt, ap );
		va_end( ap );
	}

	return( n );
}



void set_cursor_position( int fd, int row, int column )
{
	xprintf( fd, "[%d;%df", row, column );
}


void clear( int scrn )
{
	memset( &screen[scrn][0][0], ' ', sizeof( screen ) / 2 );
}


char * reg_name( int n )
{
	if( regtab[n] != NULL ) {
		if( *regtab[n] == '\0' ) return("<empty>");
		if( *regtab[n] == ' ' ) return("<erased>");
		return( regtab[n] );
	}
	return( "" );
}


char isdefault( int i )
{
	return( (i == default_screen)?'*':' ' );
}


boolean build_a_screen( int panel, int rows, int columns )
{
	int text_rows = rows - 3;				// the number of usable text rows
	int max_panels = (8 + text_rows - 1) / text_rows;	// the total number of screens needed
	int n = 2 * text_rows * panel;				// the index of the first item on the screen
	int i;

	if( (panel < 0) || (panel >= max_panels) ) {
		return( false );
	}

	clear( 0 );
	sprintf( screen[0][0], "Front Panel Manager" );
	sprintf( screen[0][1], "Select Window [0-F]  Set Default *[0-F]<ENT>" );

	for( i = 0; i < text_rows; i++ ) {
		sprintf( screen[0][i+2], "%1x%c%-16.16s  %1x%c%-16.16s", n+i, isdefault(n+i), reg_name(n+i), n+i+1, isdefault(n+i+1), reg_name(n+i+1) );
	}
	sprintf( screen[0][rows-1], "[More- UP/DN Arrow]  [Config Info- NEXT]" );
	return( true );
}



void screen1( void )
{
	clear( 0 );
	sprintf( screen[0][0], "Front Panel Manager" );
	sprintf( screen[0][1], "Select Window [0-F]  Set Default *[0-F]<ENT>" );
	sprintf( screen[0][2], "0%c%-16.16s  1%c%-16.16s", isdefault( 0), reg_name( 0), isdefault( 1), reg_name( 1) );
	sprintf( screen[0][3], "2%c%-16.16s  3%c%-16.16s", isdefault( 2), reg_name( 2), isdefault( 3), reg_name( 3) );
	sprintf( screen[0][4], "4%c%-16.16s  5%c%-16.16s", isdefault( 4), reg_name( 4), isdefault( 5), reg_name( 5) );
	sprintf( screen[0][5], "6%c%-16.16s  7%c%-16.16s", isdefault( 6), reg_name( 6), isdefault( 7), reg_name( 7) );
	sprintf( screen[0][7], "[More- UP/DN Arrow]  [Config Info- NEXT]" );
}


void screen2( void )
{
	clear( 1 );
	sprintf( screen[1][0], "Front Panel Manager" );
	sprintf( screen[1][1], "Select Window [0-F]  Set Default *[0-F]<ENT>" );
	sprintf( screen[1][2], "8%c%-16.16s  9%c%-16.16s", isdefault( 8), reg_name( 8), isdefault( 9), reg_name( 9) );
	sprintf( screen[1][3], "A%c%-16.16s  B%c%-16.16s", isdefault(10), reg_name(10), isdefault(10), reg_name(11) );
	sprintf( screen[1][4], "C%c%-16.16s  D%c%-16.16s", isdefault(12), reg_name(12), isdefault(13), reg_name(13) );
	sprintf( screen[1][5], "E%c%-16.16s  F%c%-16.16s", isdefault(14), reg_name(14), isdefault(15), reg_name(15) );
	sprintf( screen[1][7], "[More- UP/DN Arrow]  [Config Info- NEXT]" );
}


void display( int fd, int scrn )
{
	int i;
	switch( scrn ) {		// update the screens
		case 0:
			screen1();
			// build_a_screen( 0, 8, 40 );
			break;
		case 1:
			screen2();
			// build_a_screen( 1, 8, 40 );
			break;

	}

	xprintf( fd, "\f" );		// clear the display

	for( i = 0; i < 8; i++ ) {	// load the new screen
		set_cursor_position( fd, i+1, 1 );
		write( fd, &screen[scrn][i][0], 40 );
	}
	set_cursor_position( fd, 3, 10 );
}


#define KEY_ENT   0x0d
#define KEY_SPLAT 0x2a
#define KEY_PLUS  0x2b
#define KEY_MINUS 0x2d

typedef enum { KEY_NONE=0x00, KEY_UP=0x80,  KEY_DOWN=0x81, KEY_RIGHT=0x82, KEY_LEFT=0x83,
	       KEY_ESC=0x84,  KEY_YES=0x85, KEY_NO=0x86, KEY_NEXT=0x87 } key_types;

struct {
	key_types   key;
	char      * seq;
} keymap[] = {
	{ KEY_UP,    "[A" },	// up arrow
	{ KEY_DOWN,  "[B" },	// down arrow
	{ KEY_RIGHT, "[C" },	// right arrow
	{ KEY_LEFT,  "[D" },	// left arrow
	{ KEY_ESC,   "OS" },	// ESC
	{ KEY_NEXT,  "OP" },	// NEXT
	{ KEY_YES,   "OQ" },	// YES
	{ KEY_NO,    "OR" },	// NO
};


#define KEYMAP_SIZE (sizeof( keymap ) / sizeof( keymap[0] ))




int main( int argc, char * argv[] )
{
	int i;
	int current_screen = 0;
	char buf[1024];
	read_packet * rp = (read_packet *)buf;

	signal( SIGHUP, alldone );
	signal( SIGWINCH, window_handler );

	// initialize the array of Application Titles
	for( i = 0; i < APP_OPENS; i++ )
		regtab[i] = NULL;

	pad[0] = 0;

	//
	// NOTE when writing, we are writing X3.64 style strings to our virtual terminal
	//
	
	/*
	if( (fp = fopen( "/dev/msi", "wx" ) ) == NULL ) {
	        fprintf( stderr, "%s: Fopen error - %s\n", argv[0], strerror( errno ) );
		exit( 99 );
	}
	*/

	//
	// NOTE when reading, we are reading preformatted read_packets.
	//
	if( (msi = open( "/dev/msi", O_RDWR | O_EXCL )) < 0) {
	        fprintf( stderr, "%s: Open error - %s\n", argv[0], strerror( errno ) );
		exit( 99 );
	}

	printf("%s Ready msi=%d\n", argv[0], msi );

	daemon( 1, 1 );

	display( msi, current_screen );

	// set escape sequence mapping in our virtual terminal
	for( i = 0; i < KEYMAP_SIZE; i++ ) {
		tui_set_keymap( msi, keymap[i].key, keymap[i].seq );
	}

	for( ;; ) {
		printf( "MS: reading on msi=%d\n", msi );
		if( ( i = read( msi, buf, sizeof( buf ) ) ) < 0 ) {
			perror( argv[0] );
			exit( 30 );
		}

		switch( rp->command ) {
			case NOOP:
				printf("%s: NOOP packet from %d to %d\n", argv[0], rp->from, rp->to );
                                break;
                        case DATA:
				printf("%s: DATA packet from %d to %d\n", argv[0], rp->from, rp->to );
				for( i = 0; (rp->data[i] != '\0') && (i < rp->size); i++ ) {
					switch( rp->data[i] ) {
						case KEY_NEXT:	// to select the System Configuration screen
							fprintf( stderr, "MS: Setting focus to System Configuration\n");
							ioctl( msi, FP_IOC_FOCUS, SC_DEV );
							break;
						case KEY_UP:
							fprintf( stderr, "MS: keycode KEY_UP\n");
							if( current_screen == 1 ) {
								current_screen = 0;
							}
							break;
						case KEY_DOWN:
							fprintf( stderr, "MS: keycode KEY_DOWN\n");
							if( current_screen == 0 ) {
								current_screen = 1;
							}
							break;
						case KEY_SPLAT:	// '*"[0..F]<ENT> or '*'<ENT> to set the default screen
							fprintf( stderr, "MS: keycode *\n");
							i++;
							if( rp->data[i] == KEY_ENT ) {
								fprintf( stderr, "MS: setting MS_DEV as default screen\n" );
								default_screen = MS_DEV;
							} else if( isxdigit( rp->data[i] ) ) {
								int win;
								if( sscanf( (char *)&rp->data[i], "%x", &win ) != 1 ) {
									fprintf( stderr, "MS: Sequence error\n" );
									break;
								}

								i++;
								if( rp->data[i] != KEY_ENT ) {
									fprintf( stderr, "MS: Sequence error\n" );
									break;
								} else if( (win < 0) || (win > 0x0f) ) {
									fprintf( stderr, "MS: Window index out-of-bounds (%d)\n", win );
									break;
								} else if( regtab[i] == NULL ) {
									fprintf( stderr, "MS: Requested screen (%x) not active\n", win);
									break;
								}

								fprintf( stderr, "MS: setting %x as default screen\n", win );
								default_screen = win;
							}
							break;

						default:	// [0..F]<ENT> to select an application screen
							fprintf( stderr, "MS: keycode 0x%2.2x\n", rp->data[i]);
							if( isxdigit( rp->data[i] ) ) {
								int win;
								if( sscanf( (char *)&rp->data[i], "%x", &win ) != 1 ) {
									break;
								}
								i++;
								if( rp->data[i] != KEY_ENT ) {
									fprintf( stderr, "MS: Sequence error\n" );
									break;
								} else if( (win < 0) || (win > 0x0f) ) {
									fprintf( stderr, "MS: Window index out-of-bounds (%d)\n", win );
									break;
								} else if( regtab[i] == NULL ) {
									fprintf( stderr, "MS: Requested screen (%x) not active\n", win);
									break;
								}

								// TODO this doesn't work anymore.
								set_cursor_position( msi, (i>>1)+3, ((i & 0x01) * 20)+1 );

								fprintf( stderr, "MS: Setting focus to process %x\n", i);
								ioctl( msi, FP_IOC_FOCUS, i );
							}
							break;
					}
				}
				display( msi, current_screen );
                                break;
                        case CREATE:
				printf("%s: CREATE packet from %d to %d\n", argv[0], rp->from, rp->to );
                                break;
                        case REGISTER:
				regtab[rp->from] = calloc( 1, rp->size );
				strncpy( regtab[rp->from], (char *)rp->data, rp->size );
				display( msi, current_screen );
				printf("%s: REGISTER packet from %d to %d\n", argv[0], rp->from, rp->to );
                                break;
                        case DESTROY:
				free( regtab[rp->from] );
				regtab[rp->from] = NULL;
				display( msi, current_screen );
				printf("%s: DESTROY packet from %d to %d\n", argv[0], rp->from, rp->to );
                                break;
                        case FOCUS:
				printf("%s: FOCUS packet from %d to %d\n", argv[0], rp->from, rp->to );
                                break;
                        default:
				printf("%s: Undefined packet from %d to %d\n", argv[0], rp->from, rp->to );
				exit( 99 );
                                break;

		}
	}
}
